# ========= Mini Project with GitHub ===============================================
#    Name    : Demo for Mini Project with GitHub
#    Date    : 2023.01.06
#    Author  : 장현덕
#    Update  : 
# ===============================================================================

# -------------------------------------------------------------------------------
# Note
# -------------------------------------------------------------------------------
# * GitHub Repository Secrets List
# - AZURE_CREDENTIALS
# - REGISTRY_LOGIN_SERVER
# - REGISTRY_USERNAME
# - REGISTRY_PASSWORD
#
# * Create Namespace
# kubectl create ns minipj
#
# * Create Secrets in AKS
# kubectl create secret docker-registry secret-for-acr \
#     --namespace minipj \
#     --docker-server=minipj.azurecr.io \
#     --docker-username=minipj \
#     --docker-password=aubOni31LtCTld9rPgpxjcSjbXVD/axUMPtg8jQAxp+ACRAPUTo+
#
# * Create Service Principal
# az ad sp create-for-rbac \
# --role="Contributor" \
# --scopes="/subscriptions/[구독 ID]/resourcegroups/[리소스 그룹 명]" \
# --name=[서비스 주체 명] \
# --years 1 \
# --sdk-auth
#
# az ad sp create-for-rbac \
# --role="Contributor" \
# --scopes="/subscriptions/82697734-79a9-4155-8d33-7eac9d348041/resourcegroups/minipj-rg" \
# --name=MINIPJ-SP \
# --years 1 \
# --sdk-auth
#

name: 'Mini-Project-Pipeline'

on:
  push:
    paths:
      - 'board-app/**'
      - 'board-api/**'
      - 'k8s_manifests/**'
    branches: [ "main" ]

env:
  # app env
  WORKING_DIR: 'src'
  
  # azure env
  AZURE_RG: 'minipj-rg'
  ACR_NAME: 'minipj'
  SECRET: 'secret-for-acr'
  AKS_CLUSTER: 'mini-aks'
  NAMESPACE: 'minipj'
  APP_NAME_1: 'board-app'
  APP_NAME_2: 'board-api'


  # REGISTRY_NAME: minidemoacr001
  # REGISTRY_USERNAME: minidemoacr001
  # REGISTRY_PASSWORD: 5tbrfjWxVjEKSoo6W7o41NG+IWD7lmpk
  # CLIENT_ID: b974d7de-87ff-4c8d-b5c0-d5dfcd7fab6e
  # CLIENT_SECRET: 357650f0-c989-4354-ba4b-b36e42c5e065
  # CLUSTER_NAME: aks-demo-cluster
  # CLUSTER_RESOURCE_GROUP: minipj-demo-rg
  # DOCKERFILE_DIR: ./board-api
  # NAMESPACE: minipj
  # FRONT_APP_NAME: azure-vote-front
  # BACKEND_APP_NAME: azure-vote-back
  # TAG: latest

# ==================================================================
#  Deployment
# ==================================================================



# api build
  build-api-and-push-to-acr:
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout Source Code'
      uses: actions/checkout@v2
    
    - name: 'Azure Container Registry Login'
      uses: Azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }} 

    - run: |
        echo 'Start Build and Push to ACR'
        
        cd src/board-api
        mvn compile jib:build -Djib.to.tags=${{ github.sha }}
        
        echo 'Complete Build and Push to ACR'



  # deployment aks
  deploy-to-aks:
    needs: build-and-push-to-acr
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout Source Code'
      uses: actions/checkout@v2
    
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - name: 'AKS Credential'
      uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{ env.AKS_CLUSTER }}
        resource-group: ${{ env.AZURE_RG }}
      
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

    # Create image pull secret for ACR
    - name: 'Create Image Pull Secret for ACR'
      uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
    
    # Deploy app to AKS
    - name: 'Deploy to Azure Kubernetes Service'
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s_manifests/cluster-issuer.yml
          k8s_manifests/deployment.yml
          k8s_manifests/service.yml
        images: |
          ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.APP_NAME_1 }}:${{ github.sha }}
          ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.APP_NAME_2 }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}














  vote-app:
    name: 'Voting-App'
    runs-on: ubuntu-latest
    environment: demo

    steps:
    # GitHub Checkout
    - name: Checkout
      uses: actions/checkout@v1

    # ACR로 Docker Login
    - name: ACR Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
     
    # Docker Build
    - name: Docker Build
      run: |
        docker build -t minipj/minipj-front:v1 ./board-api/
        docker build -t minipj/minipj-back:v1 ./board-app
        docker tag minipj/board-api:v1 ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.FRONT_APP_NAME }}:${{ env.TAG }}
        docker tag mminipj/board-app:v1 ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.BACKEND_APP_NAME }}:${{ env.TAG }}

    # Docker Push
    - name: Docker Push
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }} -u ${{ CLIENT_ID }} -p ${{ CLIENT_SECRET }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.FRONT_APP_NAME }}:${{ env.TAG }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.BACKEND_APP_NAME }}:${{ env.TAG }}

    # Azure Kubernetes Service (AKS) cluster 세팅
    - name: AKS Cluster Setting
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Namespace 없을 시, 생성
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Deploy app to AKS
    - name: Deploy minipj-App
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          minipj-devops.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.FRONT_APP_NAME }}:${{ env.TAG }}
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.BACKEND_APP_NAME }}:${{ env.TAG }}
        namespace: ${{ env.NAMESPACE }}